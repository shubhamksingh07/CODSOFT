1.	TASK 1

TO DO LIST

A To-Do List application is a useful project that helps users manage and organize their tasks efficiently.
This project aims to create a command-line or GUI-based application using Python,
allowing users to create, update, and track their to-do lists.

class ToDoList:
    def __init__(self):
        self.tasks = []

    def add_task(self, task):
        self.tasks.append(task)
        print(f"Task '{task}' added to the to-do list.")

    def remove_task(self, task):
        if task in self.tasks:
            self.tasks.remove(task)
            print(f"Task '{task}' removed from the to-do list.")
        else:
            print(f"Task '{task}' not found in the to-do list.")

    def display_tasks(self):
        if not self.tasks:
            print("No tasks in the to-do list.")
        else:
            print("Tasks in the to-do list:")
            for index, task in enumerate(self.tasks, start=1):
                print(f"{index}. {task}")

def main():
    todo_list = ToDoList()

    while True:
        print("\nTo-Do List Application")
        print("1. Add Task")
        print("2. Remove Task")
        print("3. Display Tasks")
        print("4. Quit")
        choice = input("Select an option: ")

        if choice == "1":
            task = input("Enter the task: ")
            todo_list.add_task(task)
        elif choice == "2":
            task = input("Enter the task to remove: ")
            todo_list.remove_task(task)
        elif choice == "3":
            todo_list.display_tasks()
        elif choice == "4":
            print("Exiting the application.")
            break
        else:
            print("Invalid choice. Please select a valid option.")

if __name__ == "__main__":
    main()



2.	TASK  2

CALCULATOR

Design a simple calculator with basic arithmetic operations.
Prompt the user to input two numbers and an operation choice.
Perform the calculation and display the result.


import tkinter as tk

def press_button(key):
    current = display_var.get()

    if key == "C":
        current = ""
    elif key == "=":
        try:
            current = str(eval(current))
        except Exception as e:
            current = "Error"
    else:
        current += key

    display_var.set(current)


root = tk.Tk()
root.title("Calculator")


display_var = tk.StringVar()
display_var.set("")


entry_display = tk.Entry(root, textvariable=display_var, bd=5, font=('Arial', 20), justify="right")
entry_display.grid(row=0, column=0, columnspan=4)


buttons = [
    '7', '8', '9', '/',
    '4', '5', '6', '*',
    '1', '2', '3', '-',
    '0', '.', 'C', '+'
]


def button_click(key):
    return lambda: press_button(key)


row_idx, col_idx = 1, 0
for button in buttons:
    tk.Button(root, text=button, width=5, height=2, command=button_click(button)).grid(row=row_idx, column=col_idx)
    col_idx += 1
    if col_idx > 3:
        col_idx = 0
        row_idx += 1

# Equals button
tk.Button(root, text="=", width=5, height=2, command=button_click("=")).grid(row=row_idx, column=0)
# Zero button
tk.Button(root, text="0", width=5, height=2, command=button_click("0")).grid(row=row_idx, column=1, columnspan=2)
# Decimal button
tk.Button(root, text=".", width=5, height=2, command=button_click(".")).grid(row=row_idx, column=3)

root.mainloop()


3.	TASK 3

PASSWORD GENERATOR

A password generator is a useful tool that generates strong and random passwords for users.
This project aims to create a password generator application using Python,
allowing users to specify the length and complexity of the password.


import tkinter as tk
import random
import string


def generate_password():
    # Get the desired password length
    password_length = int(length_entry.get())

    
    characters = string.ascii_letters + string.digits + string.punctuation

    # Generate the password using random choices
    password = ''.join(random.choices(characters, k=password_length))

    # Display the generated password
    password_label.config(text="Generated Password: " + password)



root = tk.Tk()
root.title("Password Generator")


length_label = tk.Label(root, text="Enter password length:")
length_label.pack()
length_entry = tk.Entry(root)
length_entry.pack()


generate_button = tk.Button(root, text="Generate Password", command=generate_password)
generate_button.pack()


password_label = tk.Label(root, text="")
password_label.pack()


root.mainloop()

